commit 2f8a2add4742a59e0dfb9ab3a80651e1d3c05dc0
Author: David Clear <dac2@pensando.io>
Date:   Mon Apr 6 18:19:24 2020 -0700

    drivers/soc/pensando: Capri PCIE panic handler.
    
    If the kernel panics then the firmware may want to delay resetting
    the ASIC until the x86 host itself reboots.  This driver waits for
    the PCIE event indicating host reboot before resetting the ASIC.

diff --git a/arch/arm64/boot/dts/pensando/capri.dtsi b/arch/arm64/boot/dts/pensando/capri.dtsi
index 6b56c5d..aa141cf 100644
--- a/arch/arm64/boot/dts/pensando/capri.dtsi
+++ b/arch/arm64/boot/dts/pensando/capri.dtsi
@@ -373,5 +373,16 @@
 			msi-parent = <&its 0xa>;
 			num-interrupts = <16>;	/* # MSI interrupts to get */
 		};
+
+		pcie {
+			compatible = "pensando,pcie";
+			reg = <0x0 0x6a000180 0x0 0x4   /* MS CFG_WDT */
+			       0x0 0x00001400 0x0 0x10  /* WDT0 */
+			       0x0 0x070111b0 0x0 0x4   /* PXC C_MAC_INTREG */
+			       0x0 0x070110f8 0x0 0x4>; /* PXC C_PORT_MAC */
+			pciemac_mask = <0x0 0x10>;      /* rst_dn2up */
+			portmac_crs_en = <0x0 0x08>;    /* cfg_retry_en */
+			portmac_ltssm_en = <0x0 0x02>;  /* ltssm_en */
+		};
 	};
 };
diff --git a/drivers/soc/Makefile b/drivers/soc/Makefile
index 36dec14..a118511 100644
--- a/drivers/soc/Makefile
+++ b/drivers/soc/Makefile
@@ -13,6 +13,7 @@ obj-$(CONFIG_ARCH_MXC)		+= imx/
 obj-$(CONFIG_SOC_XWAY)		+= lantiq/
 obj-$(CONFIG_ARCH_MEDIATEK)	+= mediatek/
 obj-$(CONFIG_ARCH_MESON)	+= amlogic/
+obj-$(CONFIG_ARCH_PENSANDO)	+= pensando/
 obj-$(CONFIG_ARCH_QCOM)		+= qcom/
 obj-y				+= renesas/
 obj-$(CONFIG_ARCH_ROCKCHIP)	+= rockchip/
diff --git a/drivers/soc/pensando/Kconfig b/drivers/soc/pensando/Kconfig
index 16240c5..c5610d6 100644
--- a/drivers/soc/pensando/Kconfig
+++ b/drivers/soc/pensando/Kconfig
@@ -13,6 +13,13 @@ config ARCH_PENSANDO_CAPRI_SOC
 
 endchoice
 
+config CAPRI_PCIE
+	tristate "PCIe driver for Capri"
+	depends on OF && ARCH_PENSANDO_CAPRI_SOC
+	default y
+	help
+	  Provide a PCIe panic handler to respond to host reboots
+
 endmenu
 
 endif
diff --git a/drivers/soc/pensando/Makefile b/drivers/soc/pensando/Makefile
new file mode 100644
index 00000000..4823fcd
--- /dev/null
+++ b/drivers/soc/pensando/Makefile
@@ -0,0 +1,4 @@
+#
+# Capri SoC drivers
+#
+obj-$(CONFIG_CAPRI_PCIE) += cap_pcie.o cap_reboot.o
diff --git a/drivers/soc/pensando/cap_pcie.c b/drivers/soc/pensando/cap_pcie.c
new file mode 100644
index 00000000..bf1bcdf
--- /dev/null
+++ b/drivers/soc/pensando/cap_pcie.c
@@ -0,0 +1,246 @@
+/*
+ * Copyright (c) 2019, Pensando Systems Inc.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/io.h>
+#include "cap_reboot.h"
+
+#define DRV_NAME	"cap_pcie"
+#define PFX		DRV_NAME ": "
+
+/* device resource indexes */
+#define MS_CFG_WDT_IDX  0
+#define WDT_IDX         1
+#define PCIEMAC_INT_IDX 2
+#define PORTMAC_IDX	3
+
+struct pciedev_info {
+	u32 __iomem *ms_cfg_wdt;
+	u32 __iomem *wdt;
+	u32 __iomem *pciemac_int;
+	u32 __iomem *portmac;
+	u64 pciemac_mask;
+	u64 portmac_crs_en;
+	u64 portmac_ltssm_en;
+	long (*saved_panic_blink)(int state);
+};
+
+static struct pciedev_info pciedev_info;
+
+#define CAP_MS_CSR_CFG_WDT_RST_EN_LSB 0
+
+#define WDT_CR          0x00
+#define WDT_TORR        0x01
+#define WDT_CRR         0x03
+
+#define WDT_CR_ENABLE   0x1
+#define WDT_CR_PCLK_256 (0x7 << 2)
+
+#define WDT_KICK_VAL    0x76
+
+static void pcieport_set_crs(const int on)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	u32 val;
+
+	val = ioread32(pi->portmac);
+	if (on)
+		val |= pi->portmac_crs_en;
+	else
+		val &= ~pi->portmac_crs_en;
+	iowrite32(val, pi->portmac);
+}
+
+static int pcieport_get_ltssm_en(void)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	u32 val = ioread32(pi->portmac);
+
+	return (val & pi->portmac_ltssm_en) != 0;
+}
+
+/*
+ * Detect if the host is rebooting by watching the pcie mac
+ * for an interrupt indicating the link went into reset.
+ */
+static int pcie_poll_for_hostdn(void)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	u32 int_mac = ioread32(pi->pciemac_int);
+
+	return (int_mac & pi->pciemac_mask) != 0;
+}
+
+/*
+ * Reset Capri using the WDT0 configured to reset immediately.
+ * Note that we do NOT touch the WDT config until here *after*
+ * we are in the panic handling.  The WDT might be used by the
+ * watchdog driver while the system is up, but here after a panic
+ * we take ownership of the WDT to reset the system.
+ *
+ * Note also this function never returns.
+ */
+static void reset(void)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	u32 val;
+
+	printk(PFX "reset!\n");
+
+	// Enable WDT0 to reset the system
+	val = ioread32(pi->ms_cfg_wdt);
+	val |= (1 << CAP_MS_CSR_CFG_WDT_RST_EN_LSB);
+	iowrite32(val, pi->ms_cfg_wdt);
+
+	// Configure WDT to immediately reset
+	iowrite32(0, pi->wdt + WDT_TORR);
+	iowrite32(WDT_KICK_VAL, pi->wdt + WDT_CRR);
+	iowrite32(WDT_CR_PCLK_256, pi->wdt + WDT_CR);
+	iowrite32(WDT_CR_PCLK_256 | WDT_CR_ENABLE, pi->wdt + WDT_CR);
+	for (;;) {
+		asm volatile("wfi");
+	}
+	/* NOTREACHED */
+}
+
+/*
+ * This function is called by the spin loop at the end of a
+ * system panic.  We'll watch for the host to reset and
+ * reset ourselves at the same time.
+ *
+ * If we haven't yet initialized the link (ltssm_en=0) then the
+ * host side hasn't come up yet.  In that case just reset immediately.
+ */
+static long pcie_panic_blink(int state)
+{
+	/* Check sysfs for immediate reboot */
+	if (cap_panic_reboot())
+		reset();
+
+	if (pcieport_get_ltssm_en()) {
+		pcieport_set_crs(0);
+		while (!pcie_poll_for_hostdn())
+			continue;
+	}
+	reset();
+
+	/* NOTREACHED */
+	return 0;
+}
+
+static int map_resources(struct platform_device *pd)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	struct device_node *dn = pd->dev.of_node;
+
+	pi->ms_cfg_wdt = of_iomap(dn, MS_CFG_WDT_IDX);
+	pi->wdt = of_iomap(dn, WDT_IDX);
+	pi->pciemac_int = of_iomap(dn, PCIEMAC_INT_IDX);
+	pi->portmac = of_iomap(dn, PORTMAC_IDX);
+
+	if (IS_ERR(pi->ms_cfg_wdt) ||
+		IS_ERR(pi->wdt) ||
+		IS_ERR(pi->pciemac_int) ||
+		IS_ERR(pi->portmac)) {
+		pr_err(PFX "iomap resources failed\n");
+		goto errout;
+	}
+	return 0;
+
+ errout:
+	if (pi->ms_cfg_wdt != NULL)
+		iounmap(pi->ms_cfg_wdt);
+	if (pi->wdt != NULL)
+		iounmap(pi->wdt);
+	if (pi->pciemac_int != NULL)
+		iounmap(pi->pciemac_int);
+	if (pi->portmac != NULL)
+		iounmap(pi->portmac);
+	return -ENOMEM;
+}
+
+static void unmap_resources(struct platform_device *pd)
+{
+	struct pciedev_info *pi = &pciedev_info;
+
+	if (pi->ms_cfg_wdt != NULL)
+		iounmap(pi->ms_cfg_wdt);
+	if (pi->wdt != NULL)
+		iounmap(pi->wdt);
+	if (pi->pciemac_int != NULL)
+		iounmap(pi->pciemac_int);
+	if (pi->portmac != NULL)
+		iounmap(pi->portmac);
+}
+
+static int pcie_probe(struct platform_device *pd)
+{
+	struct pciedev_info *pi = &pciedev_info;
+	struct device_node *dn = pd->dev.of_node;
+	int err;
+
+	err = map_resources(pd);
+	if (err)
+		goto errout;
+
+	err = of_property_read_u64(dn, "pciemac_mask", &pi->pciemac_mask);
+	if (err) {
+		pr_err(PFX "can't find pciemac_mask: %d\n", err);
+		goto errout_unmap;
+	}
+	err = of_property_read_u64(dn, "portmac_crs_en", &pi->portmac_crs_en);
+	if (err) {
+		pr_err(PFX "can't find portmac_crs_en: %d\n", err);
+		goto errout_unmap;
+	}
+	err = of_property_read_u64(dn, "portmac_ltssm_en",
+                                   &pi->portmac_ltssm_en);
+	if (err) {
+		pr_err(PFX "can't find portmac_ltssm_en: %d\n", err);
+		goto errout_unmap;
+	}
+
+	/*
+	 * Hook the panic_blink handler so we run after
+	 * all the panic notifiers and after all the
+	 * console msgs have been flushed.
+	 */
+	pi->saved_panic_blink = panic_blink;
+	panic_blink = pcie_panic_blink;
+	return 0;
+
+ errout_unmap:
+	unmap_resources(pd);
+ errout:
+	return err;
+}
+
+static int pcie_remove(struct platform_device *pd)
+{
+	struct pciedev_info *pi = &pciedev_info;
+
+	panic_blink = pi->saved_panic_blink;
+	unmap_resources(pd);
+	return 0;
+}
+
+static struct of_device_id pcie_of_match[] = {
+	{ .compatible = "pensando,pcie" },
+	{ /* end of table */ }
+};
+
+static struct platform_driver pcie_driver = {
+	.probe = pcie_probe,
+	.remove = pcie_remove,
+	.driver = {
+		.name = "pensando-pcie",
+		.owner = THIS_MODULE,
+		.of_match_table = pcie_of_match,
+	},
+};
+module_platform_driver(pcie_driver);
diff --git a/drivers/soc/pensando/cap_reboot.c b/drivers/soc/pensando/cap_reboot.c
new file mode 100644
index 00000000..6882fae
--- /dev/null
+++ b/drivers/soc/pensando/cap_reboot.c
@@ -0,0 +1,78 @@
+/*
+ * Capri reboot control via sysfs
+ *
+ * Copyright (c) 2020, Pensando Systems Inc.
+ */
+
+#include <linux/kobject.h>
+#include <linux/string.h>
+#include <linux/sysfs.h>
+#include <linux/module.h>
+#include <linux/init.h>
+
+/*
+ * This module provides userspace control of reboot behavior
+ * after a panic.  Naples25 SWM and OCP cards will use this
+ * to enable immediate reboot after panic handling.
+ */
+static int panic_reboot;	/* default=0, no reboot */
+
+bool cap_panic_reboot(void) {
+	if (panic_reboot)
+		return true;
+	return false;
+}
+
+struct kobject *reboot_kobj;
+
+static ssize_t panic_reboot_show(struct kobject *kobj,
+		struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", panic_reboot);
+}
+
+static ssize_t panic_reboot_store(struct kobject *kobj,
+		struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	int ret;
+
+	ret = kstrtoint(buf, 10, &panic_reboot);
+	if (ret < 0)
+		return ret;
+	return count;
+}
+
+static struct kobj_attribute panic_reboot_attribute =
+	__ATTR(panic_reboot, 0664, panic_reboot_show, panic_reboot_store);
+
+static struct attribute *attrs[] = {
+	&panic_reboot_attribute.attr,
+	NULL,
+};
+
+/* Put all attributes in the kobject directory */
+static struct attribute_group attr_group = {
+        .attrs = attrs,
+};
+
+static int __init capri_reboot_init(void)
+{
+	int ret;
+
+	reboot_kobj = kobject_create_and_add("reboot", kernel_kobj);
+	if (!reboot_kobj)
+		return -ENOMEM;
+
+	ret = sysfs_create_group(reboot_kobj, &attr_group);
+	if (ret)
+		kobject_put(reboot_kobj);
+	return ret;
+}
+
+static void __exit capri_reboot_exit(void)
+{
+	kobject_put(reboot_kobj);
+}
+
+module_init(capri_reboot_init);
+module_exit(capri_reboot_exit);
diff --git a/drivers/soc/pensando/cap_reboot.h b/drivers/soc/pensando/cap_reboot.h
new file mode 100644
index 00000000..f4af4f3
--- /dev/null
+++ b/drivers/soc/pensando/cap_reboot.h
@@ -0,0 +1,10 @@
+/*
+ * Copyright (c) 2020, Pensando Systems Inc.
+ */
+
+#ifndef __CAP_REBOOT_H__
+#define __CAP_REBOOT_H__
+
+bool cap_panic_reboot(void);
+
+#endif
