commit 5806b83ccfa949f761bcc6c15748508bfb5462fe
Author: David Clear <dac2@pensando.io>
Date:   Mon Mar 16 16:34:12 2020 -0700

    Add I2C code that attempts to recover from a stuck SDA line.
    
    Note that it may not be possible to recover from a stuck SDA line and there
    is no way to recover from a stuck SCL line. Be aware that the procedure
    for SDA recovery involves a polling loop in interrupt mode. This should
    last just long enough for transmission of 9 bits, after which the
    hardware should indicate that the recovery attempt is complete. There
    have been examples where this fails, so there is also a hard maximum on
    time in the recovery loop.
    
    Details on the I2C device are in the Synopsys DesignWare DW_apb_i2c
    Databook.

diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 9fee4c0..e7e850d 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -44,6 +44,7 @@
 #define DW_IC_CON_STOP_DET_IFADDRESSED		0x80
 #define DW_IC_CON_TX_EMPTY_CTRL		0x100
 #define DW_IC_CON_RX_FIFO_FULL_HLD_CTRL		0x200
+#define DW_IC_CON_BUS_CLEAR_FEATURE_CTL	0x800
 
 /*
  * Registers offset
@@ -82,6 +83,8 @@
 #define DW_IC_TX_ABRT_SOURCE	0x80
 #define DW_IC_ENABLE_STATUS	0x9c
 #define DW_IC_CLR_RESTART_DET	0xa8
+#define DW_IC_SCL_STUCK_AT_LOW	0xac
+#define DW_IC_SDA_STUCK_AT_LOW	0xb0
 #define DW_IC_COMP_PARAM_1	0xf4
 #define DW_IC_COMP_VERSION	0xf8
 #define DW_IC_SDA_HOLD_MIN_VERS	0x3131312A
@@ -101,6 +104,7 @@
 #define DW_IC_INTR_START_DET	0x400
 #define DW_IC_INTR_GEN_CALL	0x800
 #define DW_IC_INTR_RESTART_DET	0x1000
+#define DW_IC_INTR_SCL_STUCK_AT_LOW 0x4000
 
 #define DW_IC_INTR_DEFAULT_MASK		(DW_IC_INTR_RX_FULL | \
 					 DW_IC_INTR_TX_ABRT | \
@@ -112,10 +116,13 @@
 					 DW_IC_INTR_RX_UNDER | \
 					 DW_IC_INTR_RD_REQ)
 
-#define DW_IC_STATUS_ACTIVITY		0x1
-#define DW_IC_STATUS_TFE		BIT(2)
-#define DW_IC_STATUS_MASTER_ACTIVITY	BIT(5)
-#define DW_IC_STATUS_SLAVE_ACTIVITY	BIT(6)
+#define DW_IC_SDA_STUCK_RECOVERY_ENABLE	0x8
+
+#define DW_IC_STATUS_ACTIVITY			0x1
+#define DW_IC_STATUS_TFE			BIT(2)
+#define DW_IC_STATUS_MASTER_ACTIVITY		BIT(5)
+#define DW_IC_STATUS_SLAVE_ACTIVITY		BIT(6)
+#define DW_IC_STATUS_SDA_STUCK_NOT_RECOVERED	BIT(11)
 
 #define DW_IC_SDA_HOLD_RX_SHIFT		16
 #define DW_IC_SDA_HOLD_RX_MASK		GENMASK(23, DW_IC_SDA_HOLD_RX_SHIFT)
@@ -162,6 +169,7 @@
 #define ABRT_SLAVE_FLUSH_TXFIFO	13
 #define ABRT_SLAVE_ARBLOST	14
 #define ABRT_SLAVE_RD_INTX	15
+#define ABRT_SDA_STUCK_AT_LOW	17
 
 #define DW_IC_TX_ABRT_7B_ADDR_NOACK	(1UL << ABRT_7B_ADDR_NOACK)
 #define DW_IC_TX_ABRT_10ADDR1_NOACK	(1UL << ABRT_10ADDR1_NOACK)
@@ -174,6 +182,7 @@
 #define DW_IC_TX_ABRT_10B_RD_NORSTRT	(1UL << ABRT_10B_RD_NORSTRT)
 #define DW_IC_TX_ABRT_MASTER_DIS	(1UL << ABRT_MASTER_DIS)
 #define DW_IC_TX_ARB_LOST		(1UL << ARB_LOST)
+#define DW_IC_TX_ABRT_SDA_STUCK_AT_LOW	(1UL << ABRT_SDA_STUCK_AT_LOW)
 #define DW_IC_RX_ABRT_SLAVE_RD_INTX	(1UL << ABRT_SLAVE_RD_INTX)
 #define DW_IC_RX_ABRT_SLAVE_ARBLOST	(1UL << ABRT_SLAVE_ARBLOST)
 #define DW_IC_RX_ABRT_SLAVE_FLUSH_TXFIFO	(1UL << ABRT_SLAVE_FLUSH_TXFIFO)
@@ -268,6 +277,7 @@ struct dw_i2c_dev {
 	u32			sda_hold_time;
 	u32			sda_falling_time;
 	u32			scl_falling_time;
+	u32			sda_timeout_ms;
 	u16			ss_hcnt;
 	u16			ss_lcnt;
 	u16			fs_hcnt;
diff --git a/drivers/i2c/busses/i2c-designware-master.c b/drivers/i2c/busses/i2c-designware-master.c
index 418c233..5d32e0f 100644
--- a/drivers/i2c/busses/i2c-designware-master.c
+++ b/drivers/i2c/busses/i2c-designware-master.c
@@ -33,6 +33,19 @@
 
 #include "i2c-designware-core.h"
 
+/*
+ * The maximum number of jiffies we will wait while polling for the device
+ * to indicate recovery from a stuck SDA line is complete.
+ */
+#define __MAX_RECOVERY_TIME	(HZ / 1000ul)
+#define MAX_RECOVERY_TIME (__MAX_RECOVERY_TIME == 0 ? 1 : __MAX_RECOVERY_TIME)
+
+/*
+ * We are notified of the SDA timeout recovery in interrupt mode, so we
+ * jiffies won't increment. Fall back to using loops_per_jiffy
+ */
+extern unsigned long loops_per_jiffy;
+
 static void i2c_dw_configure_fifo_master(struct dw_i2c_dev *dev)
 {
 	/* Configure Tx/Rx FIFO threshold levels */
@@ -43,6 +56,63 @@ static void i2c_dw_configure_fifo_master(struct dw_i2c_dev *dev)
 	dw_writel(dev, dev->master_cfg, DW_IC_CON);
 }
 
+/*
+ * Set the timeout used to detect stuck SDA line according to the flowchart
+ * in the documentation
+ */
+static void init_stuck_sda_timeout(struct dw_i2c_dev *dev)
+{
+	uint32_t ic_enable;
+	uint32_t timeout;
+
+	ic_enable = dw_readl(dev, DW_IC_ENABLE);
+	dw_writel(dev, ic_enable & ~0x1, DW_IC_ENABLE);
+	timeout = i2c_dw_clk_rate(dev) * dev->sda_timeout_ms; /* clk in kHz */
+	dw_writel(dev, timeout, DW_IC_SDA_STUCK_AT_LOW);
+	dw_writel(dev, ic_enable, DW_IC_ENABLE);
+}
+
+/*
+ * This clears a stuck SDA by using the device's built-in facilities.
+ */
+static void clear_stuck_sda_intr(struct dw_i2c_dev *dev)
+{
+	uint32_t ic_enable;
+	uint32_t ic_status;
+	unsigned long remaining_loops;
+
+	dev_err(dev->dev, "SDA stuck; trying to recover\n");
+	ic_enable = dw_readl(dev, DW_IC_ENABLE);
+	dw_writel(dev, ic_enable | DW_IC_SDA_STUCK_RECOVERY_ENABLE,
+		DW_IC_ENABLE);
+	
+	/*
+	 * Poll, waiting for recovery to be done. This may take up to 9 SCL
+	 * clocks and a STOP bit, though presumably the device will signal
+	 * completion in less time if it recovers sooner. There are apparently
+	 * cases where the recovery doesn't finish, so we have a timeout
+	 * in the loop.
+	 */
+	remaining_loops = MAX_RECOVERY_TIME * loops_per_jiffy;
+	do {
+		if (remaining_loops == 0) {
+			dev_err(dev->dev,
+				"Didn't recover after about %lu jiffies\n",
+				MAX_RECOVERY_TIME);
+			return;
+		}
+		remaining_loops -= 1;
+
+		ic_enable = dw_readl(dev, DW_IC_ENABLE);
+	} while ((ic_enable & DW_IC_SDA_STUCK_RECOVERY_ENABLE) != 0);
+
+	ic_status = dw_readl(dev, DW_IC_STATUS);
+	if ((ic_status & DW_IC_STATUS_SDA_STUCK_NOT_RECOVERED) != 0)
+		dev_err(dev->dev, "Stuck SDA recovery failed\n");
+	else
+		dev_info(dev->dev, "Recovery from stuck SDA successful\n");
+}
+
 /**
  * i2c_dw_init() - Initialize the designware I2C master hardware
  * @dev: device private data
@@ -166,6 +236,8 @@ static int i2c_dw_init_master(struct dw_i2c_dev *dev)
 			"Hardware too old to adjust SDA hold time.\n");
 	}
 
+	if (dev->sda_timeout_ms)
+		init_stuck_sda_timeout(dev);
 	i2c_dw_configure_fifo_master(dev);
 	i2c_dw_release_lock(dev);
 
@@ -561,6 +633,11 @@ static int i2c_dw_irq_handler_master(struct dw_i2c_dev *dev)
 
 	stat = i2c_dw_read_clear_intrbits(dev);
 	if (stat & DW_IC_INTR_TX_ABRT) {
+		if ((dev->abort_source & DW_IC_TX_ABRT_SDA_STUCK_AT_LOW) != 0)
+			clear_stuck_sda_intr(dev);
+		if (stat & DW_IC_INTR_SCL_STUCK_AT_LOW)
+			dev_err(dev->dev,
+				"SCL stuck at low; no recovery available\n");
 		dev->cmd_err |= DW_IC_ERR_TX_ABRT;
 		dev->status = STATUS_IDLE;
 
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index 0e65b97..23ac762 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -178,6 +178,8 @@ static void i2c_dw_configure_master(struct dw_i2c_dev *dev)
 
 	dev->master_cfg = DW_IC_CON_MASTER | DW_IC_CON_SLAVE_DISABLE |
 			  DW_IC_CON_RESTART_EN;
+	if (dev->sda_timeout_ms)
+		dev->master_cfg |= DW_IC_CON_BUS_CLEAR_FEATURE_CTL;
 
 	dev->mode = DW_IC_MASTER;
 
@@ -295,6 +297,8 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 					 &dev->scl_falling_time);
 		device_property_read_u32(&pdev->dev, "clock-frequency",
 					 &dev->clk_freq);
+		device_property_read_u32(&pdev->dev, "snps,sda-timeout-ms",
+					 &dev->sda_timeout_ms);
 	}
 
 	acpi_speed = i2c_acpi_find_bus_speed(&pdev->dev);
