From 81a6b6b129a3e92cde9d7468735b3352935d3c00 Mon Sep 17 00:00:00 2001
From: Hiren Mehta <hiren@pensando.io>
Date: Thu, 16 Feb 2023 17:05:19 -0800
Subject: [PATCH] drivers/soc/pensando: penfw driver

penfw driver provides sysfs and ioctl interface for the userspace
to communicate to the bl31 secure monitor

Signed-off-by: Hiren Mehta <hiren@pensando.io>
---
 arch/arm64/boot/dts/pensando/elba-asic.dts |   8 +
 arch/arm64/configs/elba_defconfig          |   1 +
 drivers/soc/pensando/Kconfig               |   6 +
 drivers/soc/pensando/Makefile              |   1 +
 drivers/soc/pensando/penfw.h               |  35 ++
 drivers/soc/pensando/penfw_drv.c           | 145 +++++++
 drivers/soc/pensando/penfw_smc.c           |  63 ++++
 drivers/soc/pensando/penfw_sysfs.c         | 420 +++++++++++++++++++++
 drivers/soc/pensando/penfw_sysfs.h         |  11 +
 9 files changed, 690 insertions(+)
 create mode 100644 drivers/soc/pensando/penfw.h
 create mode 100644 drivers/soc/pensando/penfw_drv.c
 create mode 100644 drivers/soc/pensando/penfw_smc.c
 create mode 100644 drivers/soc/pensando/penfw_sysfs.c
 create mode 100644 drivers/soc/pensando/penfw_sysfs.h

diff --git a/arch/arm64/boot/dts/pensando/elba-asic.dts b/arch/arm64/boot/dts/pensando/elba-asic.dts
index 70d0dbd3887b..a1ba7b245949 100644
--- a/arch/arm64/boot/dts/pensando/elba-asic.dts
+++ b/arch/arm64/boot/dts/pensando/elba-asic.dts
@@ -24,3 +24,11 @@
 #include "elba-flash-parts.dtsi"
 #include "elba-asic-memory.dtsi"
 #include "elba-mdev.dtsi"
+
+/ {
+       firmware {
+               penfw {
+                       compatible = "pensando,penfw";
+               };
+       };
+};
diff --git a/arch/arm64/configs/elba_defconfig b/arch/arm64/configs/elba_defconfig
index 5e26a8129a46..b89c4412ec62 100644
--- a/arch/arm64/configs/elba_defconfig
+++ b/arch/arm64/configs/elba_defconfig
@@ -248,6 +248,7 @@ CONFIG_UIO=y
 # CONFIG_HISILICON_ERRATUM_161010101 is not set
 # CONFIG_ARM64_ERRATUM_858921 is not set
 # CONFIG_IOMMU_SUPPORT is not set
+CONFIG_PENSANDO_SOC_PENFW=y
 CONFIG_EXTCON=y
 CONFIG_RESET_CONTROLLER=y
 CONFIG_RESET_ELBASR=y
diff --git a/drivers/soc/pensando/Kconfig b/drivers/soc/pensando/Kconfig
index fd290aac8817..415b860ed9f0 100644
--- a/drivers/soc/pensando/Kconfig
+++ b/drivers/soc/pensando/Kconfig
@@ -56,6 +56,12 @@ config PENSANDO_SOC_SBUS
 	help
 	  Support for the Pensando SoC sbus read/write driver
 
+config PENSANDO_SOC_PENFW
+       bool "Pensando penfw driver"
+       default n
+       help
+         Driver module to interface secure boot config
+
 endmenu
 
 endif
diff --git a/drivers/soc/pensando/Makefile b/drivers/soc/pensando/Makefile
index 555438a4cd4d..605118cb0c71 100644
--- a/drivers/soc/pensando/Makefile
+++ b/drivers/soc/pensando/Makefile
@@ -13,3 +13,4 @@ obj-$(CONFIG_PENSANDO_SOC_RSTCAUSE) += cap_rstcause.o
 obj-$(CONFIG_PENSANDO_SOC_CRASH) += cap_crash.o
 obj-$(CONFIG_PENSANDO_SOC_BSM) += cap_bsm.o
 obj-$(CONFIG_PENSANDO_SOC_SBUS) += sbus.o
+obj-$(CONFIG_PENSANDO_SOC_PENFW) += penfw_smc.o penfw_sysfs.o penfw_drv.o
diff --git a/drivers/soc/pensando/penfw.h b/drivers/soc/pensando/penfw.h
new file mode 100644
index 000000000000..429f80d3de77
--- /dev/null
+++ b/drivers/soc/pensando/penfw.h
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#ifndef __PENFW_H__
+#define __PENFW_H__
+
+enum penfw_opcodes {
+	PENFW_OP_GET_API_VER = 0,
+	PENFW_OP_GET_PENTRUST_STA,
+	PENFW_OP_SET_PENTRUST_UPG,
+	PENFW_OP_GET_BL1_STA,
+	PENFW_OP_SET_BL1_UPG,
+	PENFW_OP_GET_BL1_AR_NVCNTR,
+	PENFW_OP_COMMIT_BL1_AR_NVCNTR,
+	PENFW_OP_GET_BL31_SW_VER,
+	PENFW_OP_GET_BOOT_LCS,
+	PENFW_OP_GET_NEXT_LCS,
+	PENFW_OP_COMMIT_LCS_PROD,
+	PENFW_OPCODE_MAX,
+};
+
+struct penfw_call_args {
+	int64_t a0;
+	uint64_t a1;
+	uint64_t a2;
+	uint64_t a3;
+};
+
+#define PENFW_IOCTL_NUM  0xcd
+#define PENFW_FWCALL     _IOWR(PENFW_IOCTL_NUM, 1, struct penfw_call_args)
+
+void penfw_smc(struct penfw_call_args *args);
+
+#endif /* __PENFW_H__ */
diff --git a/drivers/soc/pensando/penfw_drv.c b/drivers/soc/pensando/penfw_drv.c
new file mode 100644
index 000000000000..8987b3c12c8b
--- /dev/null
+++ b/drivers/soc/pensando/penfw_drv.c
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/mod_devicetable.h>
+#include <linux/platform_device.h>
+#include <linux/arm-smccc.h>
+
+#include "penfw.h"
+#include "penfw_sysfs.h"
+
+#define  DEVICE_NAME "penfw"
+#define  CLASS_NAME  "penfw"
+
+static int    majorNumber;
+static struct class *penfw_class;
+static struct device *penfw_dev;
+static DEFINE_MUTEX(penfw_mutex);
+
+static int penfw_open(struct inode *inodep, struct file *filep)
+{
+	return 0;
+}
+
+static long penfw_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	long ret = 0;
+	void __user *argp = (void __user *)arg;
+	struct penfw_call_args penfw_args_ob;
+
+	mutex_lock(&penfw_mutex);
+
+	if (copy_from_user(&penfw_args_ob, argp, sizeof(penfw_args_ob))) {
+		dev_err(penfw_dev, "copy from user failed\n");
+		ret = -EFAULT;
+		goto err;
+	}
+
+	if (cmd != PENFW_FWCALL) {
+		dev_err(penfw_dev, "received unsupported ioctl %u\n", cmd);
+		ret = -EOPNOTSUPP;
+		goto err;
+	}
+
+	penfw_smc(&penfw_args_ob);
+
+	// copy back data to user space struct
+	if (copy_to_user(argp, &penfw_args_ob, sizeof(penfw_args_ob))) {
+		dev_err(penfw_dev, "copy to user failed\n");
+		ret = -EFAULT;
+		goto err;
+	}
+
+err:
+	mutex_unlock(&penfw_mutex);
+
+	return ret;
+}
+
+static struct file_operations fops = {
+	.open = penfw_open,
+	.unlocked_ioctl = penfw_ioctl
+};
+
+static int penfw_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	printk(KERN_INFO "penfw: initializing the device\n");
+	mutex_init(&penfw_mutex);
+	majorNumber = register_chrdev(0, DEVICE_NAME, &fops);
+	if (majorNumber < 0) {
+		printk(KERN_ERR "penfw: failed to register a major number\n");
+		return majorNumber;
+	}
+	printk(KERN_INFO "penfw: registered correctly with major number %d\n",
+			 majorNumber);
+
+	// register the device class
+	penfw_class = class_create(THIS_MODULE, CLASS_NAME);
+	if (IS_ERR(penfw_class)) {
+		unregister_chrdev(majorNumber, DEVICE_NAME);
+		printk(KERN_ERR "penfw: failed to register device class\n");
+		return PTR_ERR(penfw_class);
+	}
+	printk(KERN_INFO "penfw: device class registered correctly\n");
+
+	// register the device driver
+	penfw_dev = device_create(penfw_class, NULL, MKDEV(majorNumber, 0),
+				  NULL, DEVICE_NAME);
+	if (IS_ERR(penfw_dev)) {
+		class_destroy(penfw_class);
+		unregister_chrdev(majorNumber, DEVICE_NAME);
+		dev_err(penfw_dev, "failed to create the device\n");
+		return PTR_ERR(penfw_dev);
+	}
+	dev_info(penfw_dev, "device class created correctly\n");
+
+	ret = penfw_sysfs_init(penfw_dev);
+	if (ret != 0) {
+		dev_err(penfw_dev, "penfw sys initialization failed\n");
+		return -1;
+	}
+	dev_info(penfw_dev, "penfw sys initialization success\n");
+
+	return 0;
+}
+
+static int penfw_remove(struct platform_device *pd)
+{
+	mutex_destroy(&penfw_mutex);
+	device_destroy(penfw_class, MKDEV(majorNumber, 0));
+	class_unregister(penfw_class);
+	class_destroy(penfw_class);
+	unregister_chrdev(majorNumber, DEVICE_NAME);
+	penfw_sysfs_deinit();
+	printk(KERN_INFO "penfw: Exiting!\n");
+
+	return 0;
+}
+
+static struct of_device_id penfw_of_match[] = {
+	{ .compatible = "pensando,penfw" },
+	{ /* end of table */ }
+};
+
+static struct platform_driver penfw_driver = {
+	.probe = penfw_probe,
+	.remove = penfw_remove,
+	.driver = {
+		.name = "penfw",
+		.owner = THIS_MODULE,
+		.of_match_table = penfw_of_match,
+	},
+};
+
+module_platform_driver(penfw_driver);
diff --git a/drivers/soc/pensando/penfw_smc.c b/drivers/soc/pensando/penfw_smc.c
new file mode 100644
index 000000000000..a95abf4515fb
--- /dev/null
+++ b/drivers/soc/pensando/penfw_smc.c
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#include <linux/string.h>
+#include <linux/arm-smccc.h>
+#include <linux/printk.h>
+#include <linux/types.h>
+
+#include "penfw.h"
+
+#define PENFW_CALL_FID			    0xC2000002
+
+static const char* _opcode_to_str(uint8_t opcode)
+{
+	 switch (opcode) {
+	case PENFW_OP_GET_API_VER:
+		return "PENFW_OP_GET_API_VER";
+	case PENFW_OP_GET_PENTRUST_STA:
+		return "PENFW_OP_GET_PENTRUST_STA";
+	case PENFW_OP_SET_PENTRUST_UPG:
+		return "PENFW_OP_SET_PENTRUST_UPG";
+	case PENFW_OP_GET_BL1_STA:
+		return "PENFW_OP_GET_BL1_STA";
+	case PENFW_OP_SET_BL1_UPG:
+		return "PENFW_OP_SET_BL1_UPG";
+	case PENFW_OP_GET_BL1_AR_NVCNTR:
+		return "PENFW_OP_GET_BL1_AR_NVCNTR";
+	case PENFW_OP_COMMIT_BL1_AR_NVCNTR:
+		return "PENFW_OP_COMMIT_BL1_AR_NVCNTR";
+	case PENFW_OP_GET_BL31_SW_VER:
+		return "PENFW_OP_GET_BL31_SW_VER";
+	case PENFW_OP_GET_BOOT_LCS:
+		return "PENFW_OP_GET_BOOT_LCS";
+	case PENFW_OP_GET_NEXT_LCS:
+		return "PENFW_OP_GET_NEXT_LCS";
+	case PENFW_OP_COMMIT_LCS_PROD:
+		return "PENFW_OP_COMMIT_LCS_PROD";
+	default:
+		return "PENFW_OP_UNKNOWN";
+	}
+}
+
+void penfw_smc(struct penfw_call_args *args)
+{
+	struct arm_smccc_res res = {0};
+
+	printk(KERN_DEBUG "penfw: smc call for fn: %s\n",
+		_opcode_to_str(args->a1));
+
+	arm_smccc_smc(PENFW_CALL_FID, args->a1, args->a2, args->a3, 0, 0,
+		      0, 0, &res);
+
+	// copy return vals
+	args->a0 = res.a0;
+	args->a1 = res.a1;
+	args->a2 = res.a2;
+	args->a3 = res.a3;
+
+	printk(KERN_DEBUG "penfw: smc return a0: 0x%llx a1: 0x%llx "\
+		"a2: 0x%llx a3: 0x%llx\n", args->a0, args->a1,
+					   args->a2, args->a3);
+}
diff --git a/drivers/soc/pensando/penfw_sysfs.c b/drivers/soc/pensando/penfw_sysfs.c
new file mode 100644
index 000000000000..92ac65af5ec3
--- /dev/null
+++ b/drivers/soc/pensando/penfw_sysfs.c
@@ -0,0 +1,420 @@
+/*
+ * Copyright (c) 2021, Pensando Systems Inc.
+ */
+
+#include <linux/kobject.h>
+#include <linux/sysfs.h>
+#include <linux/fs.h>
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/string.h>
+
+#include "penfw_sysfs.h"
+#include "penfw.h"
+
+extern struct kobject *pensando_fw_kobj_get(void);
+
+static struct kobject *pensando_kobj;
+static struct kobject *penfw_kobject;
+static struct kobject *pentrust_kobject;
+static struct kobject *bl1_kobject;
+static struct kobject *bl31_kobject;
+static struct kobject *lifecycle_kobject;
+
+static ssize_t pentrust_show(struct kobject *kobj, struct kobj_attribute *attr,
+			     char *buf)
+{
+	struct penfw_call_args args = {0};
+
+	args.a1 = PENFW_OP_GET_PENTRUST_STA;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return sprintf(buf, "Error\n");
+	}
+
+	if (!strcmp(attr->attr.name, "version")) {
+		return sprintf(buf, "%llu\n", (args.a0 & 0xffffffff));
+	} else if (!strcmp(attr->attr.name, "upgrade")) {
+		return sprintf(buf, "%llu\n", (args.a1 >> 1) & 1);
+	} else if (!strcmp(attr->attr.name, "image_slot")) {
+		return sprintf(buf, "%llu\n", (args.a1 & 1));
+	} else {
+		return sprintf(buf, "\n");
+	}
+}
+
+static ssize_t pentrust_store(struct kobject *kobj, struct kobj_attribute *attr,
+			      const char *buf, size_t count)
+{
+	struct penfw_call_args args = {0};
+
+	if (strcmp(attr->attr.name, "upgrade") != 0) {
+		return -1;
+	}
+	args.a1 = PENFW_OP_SET_PENTRUST_UPG;
+	penfw_smc(&args);
+	if (args.a0 < 0) {
+		return -EIO;
+	}
+
+	return count;
+}
+
+static ssize_t bl1_show(struct kobject *kobj, struct kobj_attribute *attr,
+			char *buf)
+{
+	struct penfw_call_args args = {0};
+
+	args.a1 = PENFW_OP_GET_BL1_STA;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return sprintf(buf, "Error\n");
+	}
+
+	if (!strcmp(attr->attr.name, "version")) {
+		return sprintf(buf, "%llu\n", (args.a0 & 0xffffffff));
+	} else if (!strcmp(attr->attr.name, "ar_version")) {
+		return sprintf(buf, "%llu\n", ((args.a0 >> 32) & 0xff));
+	} else if (!strcmp(attr->attr.name, "upgrade")) {
+		return sprintf(buf, "%llu\n", (args.a1 >> 1) & 1);
+	} else if (!strcmp(attr->attr.name, "image_slot")) {
+		return sprintf(buf, "%llu\n", (args.a1 & 1));
+	} else {
+		return sprintf(buf, "\n");
+	}
+}
+
+static ssize_t bl1_ar_nvcntr_show(struct kobject *kobj,
+				  struct kobj_attribute *attr, char *buf)
+{
+	struct penfw_call_args args = {0};
+
+	args.a1 = PENFW_OP_GET_BL1_AR_NVCNTR;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return sprintf(buf, "Error\n");
+	}
+
+	if (!strcmp(attr->attr.name, "ar_nv_cntr")) {
+		return sprintf(buf, "%llu\n", (args.a0 & 0xffffffff));
+	} else {
+		return sprintf(buf, "\n");
+	}
+}
+
+static ssize_t bl1_store(struct kobject *kobj, struct kobj_attribute *attr,
+			 const char *buf, size_t count)
+{
+	struct penfw_call_args args = {0};
+
+	if (strcmp(attr->attr.name, "upgrade") != 0) {
+		return -1;
+	}
+	args.a1 = PENFW_OP_SET_BL1_UPG;
+	penfw_smc(&args);
+	if (args.a0 < 0) {
+		return -EIO;
+	}
+
+	return count;
+}
+
+static ssize_t bl31_show(struct kobject *kobj, struct kobj_attribute *attr,
+			 char *buf)
+{
+	struct penfw_call_args args = {0};
+	char vers[256];
+	uint64_t val;
+	int byte, shift;
+
+	args.a1 = PENFW_OP_GET_BL31_SW_VER;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return -EIO;
+	}
+
+	for (byte = 0; byte < 256 - 1; byte++) {
+		if ((byte / 8) == 0)
+			val = args.a0;
+		else if ((byte / 8) == 1)
+			val = args.a1;
+		else if ((byte / 8) == 2)
+			val = args.a2;
+		else
+			val = args.a3;
+
+		shift = (byte * 8) % 64;
+		vers[byte] = (val >> (shift)) & 0x7f;
+		if (vers[byte] == 0)
+			break;
+	}
+	vers[255] = 0;
+
+	return sprintf(buf, "%s\n", vers);
+}
+
+static const char *_lcs_to_str(int lcs_state)
+{
+	switch (lcs_state) {
+	case 0:
+		return "disabled";
+	case 1:
+		return "open";
+	case 2:
+		return "soft_prod";
+	case 3:
+		return "prod";
+	case 4:
+		return "rip";
+	default:
+		return "unknown";
+	}
+}
+
+static ssize_t boot_lcs_show(struct kobject *kobj, struct kobj_attribute *attr,
+			     char *buf)
+{
+	struct penfw_call_args args = {0};
+
+	args.a1 = PENFW_OP_GET_BOOT_LCS;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return sprintf(buf, "Error\n");
+	}
+
+	if (!strcmp(attr->attr.name, "boot_state")) {
+		return sprintf(buf, "%s\n", _lcs_to_str(args.a0));
+	} else {
+		return sprintf(buf, "\n");
+	}
+}
+
+static ssize_t next_lcs_show(struct kobject *kobj, struct kobj_attribute *attr,
+			     char *buf)
+{
+	struct penfw_call_args args = {0};
+
+	args.a1 = PENFW_OP_GET_NEXT_LCS;
+	penfw_smc(&args);
+
+	if (args.a0 < 0) {
+		return sprintf(buf, "Error\n");
+	}
+
+	if (!strcmp(attr->attr.name, "next_state")) {
+		return sprintf(buf, "%s\n", _lcs_to_str(args.a0));
+	} else {
+		return sprintf(buf, "\n");
+	}
+}
+
+// pentrust attributes
+static struct kobj_attribute pentrust_attr_ver = __ATTR(version, 0400,
+							pentrust_show, NULL);
+static struct kobj_attribute pentrust_attr_img_slot = __ATTR(image_slot, 0400,
+							     pentrust_show,
+							     NULL);
+static struct kobj_attribute pentrust_attr_upg = __ATTR(upgrade, 0600,
+							pentrust_show,
+							pentrust_store);
+
+static struct attribute *pentrust_attrs[] = {
+	&pentrust_attr_ver.attr,
+	&pentrust_attr_img_slot.attr,
+	&pentrust_attr_upg.attr,
+	NULL
+};
+
+static struct attribute_group pentrust_attr_group = {
+	.attrs = pentrust_attrs,
+};
+
+// bl1 attributes
+static struct kobj_attribute bl1_attr_ver = __ATTR(version, 0400, bl1_show,
+						   NULL);
+static struct kobj_attribute bl1_attr_ar_version = __ATTR(ar_version, 0400,
+							  bl1_show, NULL);
+static struct kobj_attribute bl1_attr_img_slot = __ATTR(image_slot, 0400,
+							bl1_show, NULL);
+static struct kobj_attribute bl1_attr_upg = __ATTR(upgrade, 0600, bl1_show,
+						   bl1_store);
+static struct kobj_attribute bl1_attr_ar_nv_cntr = __ATTR(ar_nv_cntr, 0400,
+							  bl1_ar_nvcntr_show,
+							  NULL);
+
+static struct attribute *bl1_attrs[] = {
+	&bl1_attr_ver.attr,
+	&bl1_attr_ar_version.attr,
+	&bl1_attr_img_slot.attr,
+	&bl1_attr_upg.attr,
+	&bl1_attr_ar_nv_cntr.attr,
+	NULL
+};
+
+static struct attribute_group bl1_attr_group = {
+	.attrs = bl1_attrs,
+};
+
+// bl31 attributes
+static struct kobj_attribute bl31_attr_sw_ver = __ATTR(sw_version, 0400,
+						       bl31_show, NULL);
+
+static struct attribute *bl31_attrs[] = {
+	&bl31_attr_sw_ver.attr,
+	NULL
+};
+
+static struct attribute_group bl31_attr_group = {
+	.attrs = bl31_attrs,
+};
+
+// lifecycle attributes
+static struct kobj_attribute lifecycle_attr_boot_state = __ATTR(boot_state,
+								0400,
+								boot_lcs_show,
+								NULL);
+static struct kobj_attribute lifecycle_attr_next_state = __ATTR(next_state,
+								0400,
+								next_lcs_show,
+								NULL);
+
+static struct attribute *lifecycle_attrs[] = {
+	&lifecycle_attr_boot_state.attr,
+	&lifecycle_attr_next_state.attr,
+	NULL
+};
+
+static struct attribute_group lifecycle_attr_group = {
+	.attrs = lifecycle_attrs,
+};
+
+
+int penfw_sysfs_init(struct device *penfwDevice)
+{
+	int ret = 0;
+
+	// /sys/firmware/pensando
+	pensando_kobj = pensando_fw_kobj_get();
+	if (!pensando_kobj) {
+		dev_err(penfwDevice, "Unable to create /sys/firmware/pensando"
+				     " node\n");
+		return -ENOMEM;
+	}
+
+	// /sys/firmware/pensando/penfw
+	penfw_kobject = kobject_create_and_add("penfw", pensando_kobj);
+	if (!penfw_kobject) {
+		dev_err(penfwDevice, "Unable to create "
+				     "/sys/firmware/pensando/penfw node\n");
+		ret = -ENOMEM;
+		goto penfw_err;
+	}
+
+	// /sys/firmware/pensando/penfw/pentrust
+	pentrust_kobject = kobject_create_and_add("pentrust", penfw_kobject);
+	if (!pentrust_kobject) {
+		dev_err(penfwDevice, "Unable to create "
+				     "/sys/firmware/pensando/penfw/pentrust "
+				     "node\n");
+		ret = -ENOMEM;
+		goto pentrust_err;
+	}
+
+	if (sysfs_create_group(pentrust_kobject, &pentrust_attr_group)) {
+		dev_err(penfwDevice, "Unable to create pentrust atrributes "
+				     "group\n");
+		ret = -1;
+		goto bl1_err;
+	}
+
+	// /sys/firmware/pensando/penfw/bl1
+	bl1_kobject = kobject_create_and_add("bl1", penfw_kobject);
+	if (!bl1_kobject) {
+		dev_err(penfwDevice, "Unable to create "
+				     "/sys/firmware/pensando/penfw/bl1 node\n");
+		ret = -ENOMEM;
+		goto bl1_err;
+	}
+
+	if (sysfs_create_group(bl1_kobject, &bl1_attr_group)) {
+		dev_err(penfwDevice, "Unable to create bl1 atrributes group\n");
+		ret = -1;
+		goto bl31_err;
+	}
+
+	// /sys/firmware/pensando/penfw/bl31
+	bl31_kobject = kobject_create_and_add("bl31", penfw_kobject);
+	if (!bl31_kobject) {
+		dev_err(penfwDevice, "Unable to create "
+				     "/sys/firmware/pensando/penfw/bl31 "
+				     "node\n");
+		ret = -ENOMEM;
+		goto bl31_err;
+	}
+
+	if (sysfs_create_group(bl31_kobject, &bl31_attr_group)) {
+		dev_err(penfwDevice, "Unable to create bl31 atrributes "
+				     "group\n");
+		ret = -1;
+		goto lifecycle_err;
+	}
+
+	// /sys/firmware/pensando/penfw/lifecycle
+	lifecycle_kobject = kobject_create_and_add("lifecycle", penfw_kobject);
+	if (!lifecycle_kobject) {
+		dev_err(penfwDevice, "Unable to create "
+				     "/sys/firmware/pensando/penfw/lifecycle "
+				     "node\n");
+		ret = -ENOMEM;
+		goto lifecycle_err;
+	}
+
+	if (sysfs_create_group(lifecycle_kobject, &lifecycle_attr_group)) {
+		dev_err(penfwDevice, "Unable to create lifecycle atrributes "
+				     "group\n");
+		ret = -1;
+		goto lifecycle_attr_err;
+	}
+
+return ret;
+
+lifecycle_attr_err:
+	kobject_put(lifecycle_kobject);
+lifecycle_err:
+	kobject_put(bl31_kobject);
+bl31_err:
+	kobject_put(bl1_kobject);
+bl1_err:
+	kobject_put(pentrust_kobject);
+pentrust_err:
+	kobject_put(penfw_kobject);
+penfw_err:
+	kobject_put(pensando_kobj);
+
+	return ret;
+}
+
+int penfw_sysfs_deinit(void)
+{
+	if (lifecycle_kobject)
+		kobject_put(lifecycle_kobject);
+	if (bl31_kobject)
+		kobject_put(bl31_kobject);
+	if (bl1_kobject)
+		kobject_put(bl1_kobject);
+	if (pentrust_kobject)
+		kobject_put(penfw_kobject);
+	if (penfw_kobject)
+		kobject_put(penfw_kobject);
+	if (pensando_kobj)
+		kobject_put(pensando_kobj);
+
+	return 0;
+}
diff --git a/drivers/soc/pensando/penfw_sysfs.h b/drivers/soc/pensando/penfw_sysfs.h
new file mode 100644
index 000000000000..8f1ccf0280fa
--- /dev/null
+++ b/drivers/soc/pensando/penfw_sysfs.h
@@ -0,0 +1,11 @@
+/*
+* Copyright (c) 2021, Pensando Systems Inc.
+*/
+
+#ifndef __PENFW_SYSFS_H__
+#define __PENFW_SYSFS_H__
+
+int penfw_sysfs_init(struct device* penfwDevice);
+int penfw_sysfs_deinit(void);
+
+#endif /* __PENFW_SYSFS_H__ */
-- 
2.17.1

